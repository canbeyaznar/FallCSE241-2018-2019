class PolygonDyn
!!!134697.java!!!	PolygonDyn()
		sizeOfPoints=0;
		pointsOfShapes=null;
		area=0;
		perimeter=0;
!!!134825.java!!!	PolygonDyn(inout Shape_I : Shape)
		
		area=Shape_I.area();
		perimeter=Shape_I.perimeter();
		
		if(Shape_I instanceof Rectangle)
		{
			Rectangle Rectangle_I = new Rectangle((Rectangle) Shape_I);
			sizeOfPoints=4;
			pointsOfShapes=new Polygon[sizeOfPoints];
			
			Color=Rectangle_I.getColor();
			
			PolygonDyn tempPoint=new PolygonDyn();
			tempPoint.setLocations(Rectangle_I.getLocX(),Rectangle_I.getLocY());
			pointsOfShapes[0]=tempPoint;

			tempPoint=new PolygonDyn();
			tempPoint.setLocations(Rectangle_I.getLocX()+Rectangle_I.getWidth(),Rectangle_I.getLocY());
			pointsOfShapes[1]=tempPoint;

			tempPoint=new PolygonDyn();
			tempPoint.setLocations(Rectangle_I.getLocX()+Rectangle_I.getWidth(),Rectangle_I.getLocY()+Rectangle_I.getHeight());
			pointsOfShapes[2]=tempPoint;

			tempPoint=new PolygonDyn();
			tempPoint.setLocations(Rectangle_I.getLocX(),Rectangle_I.getLocY()+Rectangle_I.getHeight());
			pointsOfShapes[3]=tempPoint;
		}
		
		else if(Shape_I instanceof Circle) {
			
			Circle Circle_I = new Circle((Circle) Shape_I);
			double PI=Math.PI;
			int tX=1,tY=-1;
			
			area=Circle_I.area();
			perimeter=Circle_I.perimeter();
			
			sizeOfPoints=100;
			pointsOfShapes=new Polygon[sizeOfPoints];
			Color=Circle_I.getColor();
			
			PolygonDyn tempPoint=new PolygonDyn();
			tempPoint.setLocations(Circle_I.getLocX(),Circle_I.getLocY()-Circle_I.getRadius());
			pointsOfShapes[0]=tempPoint;
			
			for(int i=1; i<sizeOfPoints; i++)
			{
				tempPoint=new PolygonDyn();
				tempPoint.setLocations(Circle_I.getLocX()+(tX*Circle_I.getRadius()*Math.sin(i*PI/50)),Circle_I.getLocY()+(tY*Circle_I.getRadius()*Math.cos(i*PI/50)) );
				pointsOfShapes[i]=tempPoint;
			}
			
		}
		
		else if(Shape_I instanceof Triangle) {
			
			Triangle Triangle_I = new Triangle((Triangle) Shape_I);
			
			area=Triangle_I.area();
			perimeter=Triangle_I.perimeter();
			
			sizeOfPoints=3;
			pointsOfShapes=new Polygon[sizeOfPoints];
			Color=Triangle_I.getColor();
			
			PolygonDyn tempPoint=new PolygonDyn();
			if(Triangle_I.getRotate()==0)
			{
				tempPoint.setLocations(Triangle_I.getLocX(),Triangle_I.getLocY());
				pointsOfShapes[0]=tempPoint;
				
				tempPoint=new PolygonDyn();
				tempPoint.setLocations(Triangle_I.getLocX()-Triangle_I.getEdge()/2,Triangle_I.getLocY()+Triangle_I.getHeight());
				pointsOfShapes[1]=tempPoint;
				
				tempPoint=new PolygonDyn();
				tempPoint.setLocations(Triangle_I.getLocX()+Triangle_I.getEdge()/2,Triangle_I.getLocY()+Triangle_I.getHeight());
				pointsOfShapes[2]=tempPoint;
			}
			else if(Triangle_I.getRotate()==1)
			{
				tempPoint.setLocations(Triangle_I.getLocX()-Triangle_I.getEdge()/2,Triangle_I.getLocY());
				pointsOfShapes[0]=tempPoint;
				
				tempPoint=new PolygonDyn();
				tempPoint.setLocations(Triangle_I.getLocX()+Triangle_I.getEdge()/2,Triangle_I.getLocY());
				pointsOfShapes[1]=tempPoint;
				
				tempPoint=new PolygonDyn();
				tempPoint.setLocations(Triangle_I.getLocX(),Triangle_I.getLocY()+Triangle_I.getHeight());
				pointsOfShapes[2]=tempPoint;
			}
			else
				System.out.println("THERE IS A PROBLEM IN CODE!!");
		}
		
		else
			System.out.println("THERE IS A PROBLEM IN CODE!!");
!!!134953.java!!!	PolygonDyn(inout Rectangle_I : Rectangle)
		area=Rectangle_I.area();
		perimeter=Rectangle_I.perimeter();
		
		sizeOfPoints=4;
		pointsOfShapes=new Polygon[sizeOfPoints];
		Color=Rectangle_I.getColor();
		
		PolygonDyn tempPoint=new PolygonDyn();
		tempPoint.setLocations(Rectangle_I.getLocX(),Rectangle_I.getLocY());
		pointsOfShapes[0]=tempPoint;

		tempPoint=new PolygonDyn();
		tempPoint.setLocations(Rectangle_I.getLocX()+Rectangle_I.getWidth(),Rectangle_I.getLocY());
		pointsOfShapes[1]=tempPoint;

		tempPoint=new PolygonDyn();
		tempPoint.setLocations(Rectangle_I.getLocX()+Rectangle_I.getWidth(),Rectangle_I.getLocY()+Rectangle_I.getHeight());
		pointsOfShapes[2]=tempPoint;

		tempPoint=new PolygonDyn();
		tempPoint.setLocations(Rectangle_I.getLocX(),Rectangle_I.getLocY()+Rectangle_I.getHeight());
		pointsOfShapes[3]=tempPoint;
!!!135081.java!!!	PolygonDyn(inout Circle_I : Circle)
    	
    	double PI=Math.PI;
		int tX=1,tY=-1;
		
		area=Circle_I.area();
		perimeter=Circle_I.perimeter();
		
		sizeOfPoints=100;
		pointsOfShapes=new Polygon[sizeOfPoints];
		Color=Circle_I.getColor();
		
		PolygonDyn tempPoint=new PolygonDyn();
		tempPoint.setLocations(Circle_I.getLocX(),Circle_I.getLocY()-Circle_I.getRadius());
		pointsOfShapes[0]=tempPoint;
		
		for(int i=1; i<sizeOfPoints; i++)
		{
			tempPoint=new PolygonDyn();
			tempPoint.setLocations(Circle_I.getLocX()+(tX*Circle_I.getRadius()*Math.sin(i*PI/50)),Circle_I.getLocY()+(tY*Circle_I.getRadius()*Math.cos(i*PI/50)) );
			pointsOfShapes[i]=tempPoint;
		}
!!!135209.java!!!	PolygonDyn(inout Triangle_I : Triangle)
    	
    	area=Triangle_I.area();
		perimeter=Triangle_I.perimeter();
		
		sizeOfPoints=3;
		pointsOfShapes=new Polygon[sizeOfPoints];
		Color=Triangle_I.getColor();
		
		PolygonDyn tempPoint=new PolygonDyn();
		if(Triangle_I.getRotate()==0)
		{
			tempPoint.setLocations(Triangle_I.getLocX(),Triangle_I.getLocY());
			pointsOfShapes[0]=tempPoint;
			
			tempPoint=new PolygonDyn();
			tempPoint.setLocations(Triangle_I.getLocX()-Triangle_I.getEdge()/2,Triangle_I.getLocY()+Triangle_I.getHeight());
			pointsOfShapes[1]=tempPoint;
			
			tempPoint=new PolygonDyn();
			tempPoint.setLocations(Triangle_I.getLocX()+Triangle_I.getEdge()/2,Triangle_I.getLocY()+Triangle_I.getHeight());
			pointsOfShapes[2]=tempPoint;
		}
		else if(Triangle_I.getRotate()==1)
		{
			tempPoint.setLocations(Triangle_I.getLocX()-Triangle_I.getEdge()/2,Triangle_I.getLocY());
			pointsOfShapes[0]=tempPoint;
			
			tempPoint=new PolygonDyn();
			tempPoint.setLocations(Triangle_I.getLocX()+Triangle_I.getEdge()/2,Triangle_I.getLocY());
			pointsOfShapes[1]=tempPoint;
			
			tempPoint=new PolygonDyn();
			tempPoint.setLocations(Triangle_I.getLocX(),Triangle_I.getLocY()+Triangle_I.getHeight());
			pointsOfShapes[2]=tempPoint;
		}
		else
			System.out.println("THERE IS A PROBLEM IN CODE!!");
!!!135337.java!!!	PolygonDyn(inout PolyDyn_I : PolygonDyn)
    	
    	sizeOfPoints=PolyDyn_I.sizeOfPoints;
    	area=PolyDyn_I.area;
    	perimeter=PolyDyn_I.perimeter;
    	Color=PolyDyn_I.Color;
    	pointsOfShapes=new Polygon[sizeOfPoints];
    	pointsOfShapes=PolyDyn_I.pointsOfShapes;
!!!135465.java!!!	getColor() : String
    	return Color;
!!!135593.java!!!	area() : double
		return area;
!!!135721.java!!!	perimeter() : double
		return perimeter;
!!!135849.java!!!	Size() : int
		return sizeOfPoints;
!!!135977.java!!!	getPoints() : Polygon
		return pointsOfShapes;
!!!136105.java!!!	increment() : Shape
		
		for(Polygon i : pointsOfShapes)
			i.increment();
		
		return this;
!!!136233.java!!!	decrement() : Shape
		
		for(Polygon i : pointsOfShapes)
			i.decrement();
		
		return this;
!!!136361.java!!!	draw(inout g : Graphics) : void
		
		paintComponent(g);
!!!136489.java!!!	paintComponent(inout g : Graphics) : void
		
		super.paintComponent(g);
		
		int size=this.sizeOfPoints;
		
		int[] xPoints = new int[size];
		int[] yPoints = new int[size];
		
		int index=0;
		for(Polygon i : ( this.getPoints() ))
		{
			xPoints[index] = (int)(i.getLocX());
			yPoints[index] =(int)(i.getLocY());
			++index;
		}
		
		g.drawPolygon(xPoints, yPoints, size);	
		
!!!136617.java!!!	compare(inout o1 : Shape, inout o2 : Shape) : int
		
		if(o1.area()==o2.area())
			return 1;
		return 0;
